1. Infix Notation
	- Infix notation is the most coomon way of writing expressions, where operators are placed between operands.
	- Example: A + B | Here 'A' and 'B' are operands, and '+' is the operator placed between them
	* Characteristics:
	  - Human-Friendly: this is the standard wat we write expression in math and most programming languages.
	  - Opperator Precedence: In infix notation, the order of operation matter. for exmple, 'A + B * C'
	    is evaluated as 'A + (B * C)' because multplication has igher precdence than addition.

2. Postfix Notation
	- Postfix notation, also known as Reverse Polish Notation (RPN), places the operator after its operand.
	- Example: 'A B +' | Here, the operator '+' comes after the operands 'A' and 'B'.
	* Characteristics:
	  - No need for parentheses: Becuase the order of the opertions is unambiguous, postfix expressions do not
	    require parenttheses.
	  - Stack-based Evaluation: postfix expressions are easily evaulated using a stack. This is why it's often
	    used in compilers abd calculators.

3. Postfix caluculatios
	Postfix calculations are suprisingly easy and efficient with the help of stacks:
	2 examples:
	1. Given the postfix "3 4 + 2 *" first push operands onto the stack untill you encounter a operator:
	   "push(3), push(4) encounter + operator" then pop the required operands out the stack and apply operator:
	   "pop(4) + pop(3) = 7, push result to stack; push(7), continue" then begin pushing operands into the
	   stack agian: "push(2) encounter * operator, pop(2) * pop(7), push result to stack; push(14), continue"
	   no more operands, then the final element on the stack is the answer: ((3 + 4) * 2) = 17
	2. Given the postfix " 5 6 2 * +" again, push the operands onto the stack, "push(5), push(6), push(2)"
	   encounter operator "*" pull required amount of operands off the stack "pop(2) * pop(6)" push result
	   continue. encounter "+" operator, pull required amount of operands off the stack "pop(12) + pop(5)"
	   push result, no more operands to push to stack, so final element in the stack is the answer "17"
	
	Code for Postfix calculations done, only for integers <= 9
4. Innfix to PostFix
	- Doable.

